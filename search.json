[{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ailich.github.io/GLCMTextures/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ailich.github.io/GLCMTextures/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Ilich. Author, maintainer.","code":""},{"path":"https://ailich.github.io/GLCMTextures/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ilich, Alexander R. 2020. “GLCMTextures”, doi:10.5281/zenodo.4310186. https://github.com/ailich/GLCMTextures.","code":"@Misc{,   author = {Alexander R. Ilich},   title = {GLCMTextures},   year = {2020},   doi = {10.5281/zenodo.4310186},   url = {https://github.com/ailich/GLCMTextures}, }"},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"readme","dir":"","previous_headings":"","what":"GLCM Textures of Raster Layers","title":"GLCM Textures of Raster Layers","text":"Alexander Ilich October 17, 2022 Ilich, Alexander R. 2020. “GLCMTextures.”, https://doi.org/10.5281/zenodo.4310186. https://github.com/ailich/GLCMTextures.","code":""},{"path":[]},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"GLCM Textures of Raster Layers","text":"R package calculates common gray-level co-occurrence matrix (GLCM) texture metrics used spatial analysis (Hall-Beyer 2017). interfaces C++ via Rcpp RcppArmadillo packages increased speed. Texture metrics calculated using symmetric gray level co-occurence matrix (GLCM), meaning pixel counted focal neighboring pixel. details symmetric GLCM constructed, highly recommend checking Dr. Mryka Hall-Beyer’s GLCM texture tutorial.","code":""},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"GLCM Textures of Raster Layers","text":"comparing results across different software calculate GLCM texture metrics, inconsistencies among results. package meant provide clearly documented implementation GLCM texture metrics gives user control key parameters make clear user exactly calculating. , formulas texture metric provided, different shifts can specified, user can decide handle NA values, user gets control data quantized.","code":""},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"install-and-load-package","dir":"","previous_headings":"","what":"Install and Load Package","title":"GLCM Textures of Raster Layers","text":"package can installed CRAN using install.packages(\"GLCMTextures\") development version can installed github using code remotes::install_github(\"ailich/GLCMTextures\"). using Windows, may need install Rtools using instructions found ). install github must already remotes package installed, can installed using install.packages(\"remotes\") package relies terra package handling spatial raster data.","code":""},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"specifying-the-relationship-between-focal-and-neighbor-pixels","dir":"","previous_headings":"","what":"Specifying the Relationship Between Focal and Neighbor Pixels","title":"GLCM Textures of Raster Layers","text":"convention specifying direction neighboring pixel (shift) shown image . blue pixel center treated focal pixel example. Shifts specified c(x_shift, y_shift). , shift c(1,0) refers neighboring pixel 1 right 0 upwards focal pixel. Since symmetric GLCM created, means pixel counted focal neighboring pixel, also tabulates shift opposite direction c(-1,0), dotted blue line. Therefore, two shifts produce equivalent results. Although neighboring pixels typically considered one away given direction, shift value can specified integer value. GLCM Shift","code":""},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"available-metrics","dir":"","previous_headings":"","what":"Available Metrics","title":"GLCM Textures of Raster Layers","text":"8 metrics can calculated package. metrics can divided 3 groups: contrast group, orderliness group, descriptive statistics group (Hall-Beyer 2017). formulas provided Hall-Beyer (2017). N = Number rows columns GLCM (Equal number gray levels) = row indices GLCM matrix (equal gray level reference cell) j = column indices GLCM matrix (equal gray level neighboring cell) Pi,j = Probability (relative frequency) neighboring cells gray levels & j","code":""},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"contrast-group","dir":"","previous_headings":"Available Metrics","what":"Contrast Group","title":"GLCM Textures of Raster Layers","text":"$$\\text{GLCM Contrast} = \\sum_{,j=0}^{N-1} {P_{,j}(-j)^2}$$ $$\\text{GLCM Dissimilarity} = \\sum_{,j=0}^{N-1} {P_{,j}|-j|}$$ $$\\text{GLCM Homogeneity} = \\sum_{,j=0}^{N-1} \\frac{P_{,j}}{1+(-j)^2}$$","code":""},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"orderliness-group","dir":"","previous_headings":"Available Metrics","what":"Orderliness Group","title":"GLCM Textures of Raster Layers","text":"$$\\text{GLCM Angular Second Moment (ASM)} = \\sum_{,j=0}^{N-1} {P_{,j}^2}$$ $$\\text{GLCM Entropy} = \\sum_{,j=0}^{N-1} {P_{,j}[-ln(P_{,j})]} \\text{ } 0*ln(0)=0$$","code":""},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"descriptive-statistics-group","dir":"","previous_headings":"Available Metrics","what":"Descriptive Statistics Group","title":"GLCM Textures of Raster Layers","text":"$$\\text{GLCM Mean} (\\mu) = \\sum_{,j=0}^{N-1} (P_{,j})$$ $$\\text{GLCM Variance} (\\sigma^2) = \\sum_{,j=0}^{N-1} P_{,j}(-\\mu)^2$$ $$\\text{GLCM Correlation} = \\sum_{,j=0}^{N-1} {P_{,j} \\frac{(-\\mu)(j-\\mu)}{\\sigma^2}}$$","code":""},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"GLCM Textures of Raster Layers","text":"Load packages See package help page","code":"library(GLCMTextures) #Load GLCMTextures package help(package=\"GLCMTextures\")"},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"test-matrix","dir":"","previous_headings":"Tutorial","what":"Test Matrix","title":"GLCM Textures of Raster Layers","text":"conducting texture calculations entire raster data sets, work small matrix. test matrix 3 rows 3 columns contains values 0-3 (4 gray levels). can use themake_glcm function create normalized symmetric GLCM. GLCM tabulation counts dimensions number gray levels. GLCM initialized zeros add tabulate counts. Initialzed GLCM row column number refers gray value focal neighboring pixel (Since gray levels start value 0, row/column number 1 larger corresponding gray level).use shift c(1,0) meaning neighboring pixels pixel directly right focal pixel. start top left corner can see 2 focal value 3 neighboring value directly right, add 1 corresponding position GLCM row 3 (2+1)/column 4(3+1). Since like create symmetric GLCM pixel treated focal neighbor value, also add row 4/column 3. continue process throughout whole image, moving right next focal pixel, start next row given row completed. resulting GLCM square matrix counts symmetric diagonal. finished tabulating counts “normailize” GLCM dividing element sum counts get relative frequencies probabilities given pixel value occurs next pixel value j. values normalized GLCM therefore sum 1. accomplished one line code setting argument normalize=TRUE default. may noticed pixels last column test matrix neighboring pixel right, tabulate counts cases; however, precisely tabulate symmetrical GLCM pixels neighbors left. Also, note although original matrix 3x3, GLCM 4x4 size GLCM corresponds number gray levels, size input matrix. GLCM constructed, can use calculate texture metrics using theglcm_metrics function calculate GLCM texture metrics","code":"test_matrix<- matrix(data=c(2,0,1,3,0,0,0,3,2), nrow = 3, ncol=3) print(test_matrix) #>      [,1] [,2] [,3] #> [1,]    2    3    0 #> [2,]    0    0    3 #> [3,]    1    0    2 #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    0 #> [2,]    0    0    0    0 #> [3,]    0    0    0    0 #> [4,]    0    0    0    0 #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    0 #> [2,]    0    0    0    0 #> [3,]    0    0    0    1 #> [4,]    0    0    1    0 horizontal_glcm<- make_glcm(test_matrix, n_levels = 4, shift = c(1,0), normalize = FALSE) horizontal_glcm #>      [,1] [,2] [,3] [,4] #> [1,]    2    1    1    2 #> [2,]    1    0    0    0 #> [3,]    1    0    0    1 #> [4,]    2    0    1    0 horizontal_glcm<- horizontal_glcm/sum(horizontal_glcm) horizontal_glcm #>            [,1]       [,2]       [,3]       [,4] #> [1,] 0.16666667 0.08333333 0.08333333 0.16666667 #> [2,] 0.08333333 0.00000000 0.00000000 0.00000000 #> [3,] 0.08333333 0.00000000 0.00000000 0.08333333 #> [4,] 0.16666667 0.00000000 0.08333333 0.00000000 make_glcm(test_matrix, n_levels = 4, shift = c(1,0), normalize = TRUE) #>            [,1]       [,2]       [,3]       [,4] #> [1,] 0.16666667 0.08333333 0.08333333 0.16666667 #> [2,] 0.08333333 0.00000000 0.00000000 0.00000000 #> [3,] 0.08333333 0.00000000 0.00000000 0.08333333 #> [4,] 0.16666667 0.00000000 0.08333333 0.00000000 glcm_metrics(horizontal_glcm) #>      glcm_contrast glcm_dissimilarity   glcm_homogeneity           glcm_ASM  #>           4.000000           1.666667           0.400000           0.125000  #>       glcm_entropy          glcm_mean      glcm_variance   glcm_correlation  #>           2.138333           1.166667           1.638889          -0.220339"},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"raster-data","dir":"","previous_headings":"Tutorial","what":"Raster Data","title":"GLCM Textures of Raster Layers","text":"Now can move calculating single value given texture metric calculating raster surfaces texture metrics.","code":"r<- rast(volcano, extent= ext(2667400, 2667400 + ncol(volcano)*10, 6478700, 6478700 + nrow(volcano)*10), crs = \"EPSG:27200\") #Use preloaded volcano dataset as a raster plot(r) #plot values"},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"raster-quantization","dir":"","previous_headings":"Tutorial > Raster Data","what":"Raster Quantization","title":"GLCM Textures of Raster Layers","text":"test image integer values range 0 3. Raster data often represent continuous data cover potentially large range may confined integer values greater equal zero. first step therefore quantize raster image discrete number gray levels. can done using thequantize_raster function. Typically data quantized 16 (4 bit; 24) 32 (5 bit; 25) gray levels. increasing number gray levels, computation cost increases. two methods quantization available quantize_raster function. first way, method = \"equal range\", create bins cover range equal size (e.g. original data ranged 0-20 quantized 4 levels, [0-5) reassigned 0, [5-10) reassigned 1, [10-15) reassigned 2, [15-20] reassigned 4). simplest common quantization method. default raster scaled using min max data set, max min value can supplied max_val min_val parameters. may desirable making comparisons across several different rasters need gray levels correspond consistent way original data, can supply global max/min theoretical max/min values occur.  second way perform quantization method = \"equal prob\" performs equal probability quantization use quantiles (Hyndman Fan 1996) create bins contain approximately equal number samples. quantization method suggested original paper (Haralick Shanmugam 1973).  Since used equal probability quantization, value approximately count","code":"rq_equalrange<- quantize_raster(r = r, n_levels = 16, method = \"equal range\") plot(rq_equalrange, col=grey.colors(16)) #> [1] \"Min Val = 0\" #> [1] \"Max Val = 15\" rq_equalprob<- quantize_raster(r = r, n_levels = 16, method = \"equal prob\") plot(rq_equalprob, col=grey.colors(16)) #> [1] \"Min Val = 0\" #> [1] \"Max Val = 15\" freq(rq_equalprob)[,c(\"value\", \"count\")] #>    value count #> 1      0   304 #> 2      1   344 #> 3      2   269 #> 4      3   313 #> 5      4   394 #> 6      5   302 #> 7      6   340 #> 8      7   354 #> 9      8   332 #> 10     9   342 #> 11    10   341 #> 12    11   330 #> 13    12   321 #> 14    13   323 #> 15    14   339 #> 16    15   359"},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"calculate-texture-metrics-raster-surfaces","dir":"","previous_headings":"Tutorial > Raster Data","what":"Calculate Texture Metrics Raster Surfaces","title":"GLCM Textures of Raster Layers","text":"raster data sets, rather calculating single value texture entire image, create surface represents texture given neighborhood around pixel. calculate texture metrics using rectangular sliding window given size. start top left pixel treat central pixel, specify window given dimensions. extract window size around central pixel (note: window size must odd). extracted window run process shown test_matrix, resulting value texture metric assigned value position corresponding central pixel. , can use theglcm_textures function. example, calculate textures using window size 3 rows 5 columns  may noticed example quantization = \"none\". supplied raster already quantized. instead call original raster quantized within glcm_textures function. can also calculate value textures across multiple shifts supplying list. fact, default return directionally/rotationally invariant textures averaged across 4 directions shift = list(c(1, 0), c(1, 1), c(0, 1), c(-1, 1)).  Options default calculated texture metrics returned; however can subset returned specifying ones want using metrics argument. can also use na.rm specify want handle NA values.","code":"textures1<- glcm_textures(rq_equalprob, w = c(3,5), n_levels = 16, quantization = \"none\", shift = c(1,0))  plot(textures1) textures2<- glcm_textures(r, w = c(3,5), n_levels = 16, quantization = \"equal prob\", shift=c(1,0))  all.equal(values(textures1), values(textures2)) #> [1] TRUE textures3<- glcm_textures(r, w = c(3,5), n_levels = 16, quantization = \"equal prob\", shift = list(c(1, 0), c(1, 1), c(0, 1), c(-1, 1)))  plot(textures3)"},{"path":"https://ailich.github.io/GLCMTextures/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"GLCM Textures of Raster Layers","text":"Hall-Beyer, Mryka. 2017. “GLCM Texture Tutorial v3.0. Haralick, Robert M, Karthikeyan Shanmugam, ’Hak Dinstein. 1973. “Textural features image classification.” IEEE Transactions systems, man, cybernetics (6):610-621. Hyndman, Rob J, Yanan Fan. 1996. “Sample quantiles statistical packages.” American Statistician 50 (4):361-365.","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the GLCM Texture Metrics from a GLCM — glcm_metrics","title":"Calculates the GLCM Texture Metrics from a GLCM — glcm_metrics","text":"Calculates GLCM Texture Metrics GLCM","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the GLCM Texture Metrics from a GLCM — glcm_metrics","text":"","code":"glcm_metrics(   GLCM,   metrics = c(\"glcm_contrast\", \"glcm_dissimilarity\", \"glcm_homogeneity\", \"glcm_ASM\",     \"glcm_entropy\", \"glcm_mean\", \"glcm_variance\", \"glcm_correlation\") )"},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the GLCM Texture Metrics from a GLCM — glcm_metrics","text":"GLCM numeric matrix representing Normalized GLCM. metrics vector texture metrics return. Valid entries include \"glcm_contrast\", \"glcm_dissimilarity\", \"glcm_homogeneity\", \"glcm_ASM\", \"glcm_entropy\", \"glcm_mean\", \"glcm_variance\", \"glcm_correlation\".","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the GLCM Texture Metrics from a GLCM — glcm_metrics","text":"GLCM based texture measures numeric vector.","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_metrics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates the GLCM Texture Metrics from a GLCM — glcm_metrics","text":"Hall-Beyer, M., 2017. GLCM Texture: Tutorial v. 3.0. University Calgary, Alberta, Canada. Haralick, R.M., Shanmugam, K., Dinstein, ., 1973. Textural features image classification. IEEE Transactions Systems, Man, Cybernetics 610–621. https://doi.org/10.1109/TSMC.1973.4309314","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the GLCM Texture Metrics from a GLCM — glcm_metrics","text":"","code":"test_matrix<- matrix(data=c(2,0,1,3,0,0,0,3,2), nrow = 3, ncol=3) horizontal_glcm<- make_glcm(test_matrix, n_levels = 4, shift = c(1,0), normalize = TRUE) metrics<-glcm_metrics(horizontal_glcm, metrics= c(\"glcm_contrast\", \"glcm_dissimilarity\", \"glcm_homogeneity\", \"glcm_ASM\", \"glcm_entropy\", \"glcm_mean\", \"glcm_variance\", \"glcm_correlation\"))"},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_textures.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates GLCM texture metrics of a Raster Layer — glcm_textures","title":"Calculates GLCM texture metrics of a Raster Layer — glcm_textures","text":"Calculates GLCM texture metrics RasterLayer sliding rectangular window","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_textures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates GLCM texture metrics of a Raster Layer — glcm_textures","text":"","code":"glcm_textures(   r,   w = c(3, 3),   n_levels,   shift = list(c(1, 0), c(1, 1), c(0, 1), c(-1, 1)),   metrics = c(\"glcm_contrast\", \"glcm_dissimilarity\", \"glcm_homogeneity\", \"glcm_ASM\",     \"glcm_entropy\", \"glcm_mean\", \"glcm_variance\", \"glcm_correlation\"),   quantization,   min_val = NULL,   max_val = NULL,   na.rm = FALSE,   filename = NULL,   overwrite = FALSE,   wopt = list() )"},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_textures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates GLCM texture metrics of a Raster Layer — glcm_textures","text":"r single layer SpatRaster RasterLayer. already quantized set quantization \"none\". valid range values quantized raster 0 n_levels-1 (e.g. raster 32 grey levels valid range 0-31). w vector length 2 specifying dimensions rectangular window use first number number rows second number number columns. Window size must odd number. n_levels Number grey levels used quantization (Typically set 16 32). shift vector length 2, list vectors length 2 specifying relationship neighboring pixel reference pixel. first number represents shift x direction second number represents shift y direction, right positive. example c(1,0) pixel directly right. GLCM made symmetrical counting pair twice, \"forwards\" \"backwards\" interchanging reference neighbor pixels. Therefore shift directly right c(1,0) equivalent shift directly left c(-1,0). average \"directions\" can use shift=list(c(1,0), c(1,1), c(0,1), c(-1,1)), default. metrics vector glcm texture metrics return. Valid entries include \"glcm_contrast\", \"glcm_dissimilarity\", \"glcm_homogeneity\", \"glcm_ASM\", \"glcm_entropy\", \"glcm_mean\", \"glcm_variance\", \"glcm_correlation\". quantization quantization method (either \"equal range\", \"equal prob\", \"none\"). \"equal range\" quantization create bins cover range equal size. \"equal prob\" performs equal probability quantization use quantiles create bins approximately equal number samples. \"none\" means layer already quantized. min_val minimum value equal range quantization (supplied, minimum value raster used) max_val maximum value equal range quantization (supplied, maximum value raster used) na.rm logical value indicating whether NA values stripped computation proceeds (default=FALSE) filename character Output filename. Can single filename, many filenames layers write file layer overwrite logical. TRUE, filename overwritten (default FALSE). wopt list named options writing files writeRaster","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_textures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates GLCM texture metrics of a Raster Layer — glcm_textures","text":"SpatRaster Raster* Object","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_textures.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates GLCM texture metrics of a Raster Layer — glcm_textures","text":"Hall-Beyer, M., 2017. GLCM Texture: Tutorial v. 3.0. University Calgary, Alberta, Canada. Haralick, R.M., Shanmugam, K., Dinstein, ., 1973. Textural features image classification. IEEE Transactions Systems, Man, Cybernetics 610–621. https://doi.org/10.1109/TSMC.1973.4309314","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/glcm_textures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates GLCM texture metrics of a Raster Layer — glcm_textures","text":"","code":"r<- rast(volcano, extent= ext(2667400, 2667400 + ncol(volcano)*10, 6478700, 6478700 + nrow(volcano)*10), crs = \"EPSG:27200\") txt <- glcm_textures(r, w = c(3,5), n_levels = 16, quantization = \"equal prob\", shift = list(c(1, 0), c(1, 1), c(0, 1), c(-1, 1))) plot(txt)"},{"path":"https://ailich.github.io/GLCMTextures/reference/make_glcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a symmetrical normalized GLCM for a given matrix and shift — make_glcm","title":"Creates a symmetrical normalized GLCM for a given matrix and shift — make_glcm","text":"Creates symmetrical normalized GLCM given matrix shift","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/make_glcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a symmetrical normalized GLCM for a given matrix and shift — make_glcm","text":"","code":"make_glcm(x, n_levels, shift, na.rm = FALSE, normalize = TRUE)"},{"path":"https://ailich.github.io/GLCMTextures/reference/make_glcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a symmetrical normalized GLCM for a given matrix and shift — make_glcm","text":"x matrix integers representing quantized values. valid range values 0 n_levels-1 (e.g. matrix 32 grey levels valid range 0-31). n_levels Number grey levels used quantization shift vector length 2 specifying relationship neighboring pixel reference pixel. first number represents shift x direction second number represents shift y direction, right positive. example c(1,0) pixel directly right. GLCM made symmetrical counting pair twice, \"forwards\" \"backwards\" interchanging reference neighbor pixels. Therefore shift directly right c(1,0) equivalent shift directly left c(-1,0) na.rm logical value indicating whether NA values stripped computation proceeds (default=FALSE) normalize logical specifying whether normalize counts probabilities dividing sum GLCM (TRUE, default) express GLCM counts (FALSE)","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/make_glcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a symmetrical normalized GLCM for a given matrix and shift — make_glcm","text":"symmetric GLCM matrix","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/make_glcm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Creates a symmetrical normalized GLCM for a given matrix and shift — make_glcm","text":"Hall-Beyer, M., 2017. GLCM Texture: Tutorial v. 3.0. University Calgary, Alberta, Canada. Haralick, R.M., Shanmugam, K., Dinstein, ., 1973. Textural features image classification. IEEE Transactions Systems, Man, Cybernetics 610–621. https://doi.org/10.1109/TSMC.1973.4309314","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/make_glcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a symmetrical normalized GLCM for a given matrix and shift — make_glcm","text":"","code":"test_matrix<- matrix(data=c(2,0,1,3,0,0,0,3,2), nrow = 3, ncol=3) # Tabulate a GLCM of counts horizontal_glcm_counts<- make_glcm(test_matrix, n_levels = 4, shift = c(1,0), normalize = FALSE) # Calculate a normalized GLCM of probabilities horizontal_glcm_norm<- make_glcm(test_matrix, n_levels = 4, shift = c(1,0), normalize = TRUE)"},{"path":"https://ailich.github.io/GLCMTextures/reference/quantize_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantizes raster to a set number of discrete levels — quantize_raster","title":"Quantizes raster to a set number of discrete levels — quantize_raster","text":"Quantizes raster set number discrete levels starting 0. 2 methods quantization available: \"uniform\" \"equal prob\"","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/quantize_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantizes raster to a set number of discrete levels — quantize_raster","text":"","code":"quantize_raster(   r,   n_levels,   method,   min_val = NULL,   max_val = NULL,   filename = NULL,   overwrite = FALSE,   wopt = list() )"},{"path":"https://ailich.github.io/GLCMTextures/reference/quantize_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantizes raster to a set number of discrete levels — quantize_raster","text":"r single layer SpatRaster RasterLayer. n_levels number levels quantize method quantization method (either \"equal range\" \"equal prob\"). \"equal range\" quantization create bins cover range equal size. \"equal prob\" performs equal probability quantization use quantiles create bins approximately equal number samples. min_val minimum value equal range quantization (supplied, minimum value raster used) max_val maximum value equal range quantization (supplied, maximum value raster used) filename character Output filename. overwrite logical. TRUE, filename overwritten (default FALSE). wopt list named options writing files writeRaster","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/quantize_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantizes raster to a set number of discrete levels — quantize_raster","text":"single layer SpatRaster RasterLayer integer values ranging 0 n_levels-1","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/quantize_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantizes raster to a set number of discrete levels — quantize_raster","text":"Equal probability quantization method recommended Haralick et al., 1973. However, equal range may desirable making comparisons across several different rasters need gray levels correspond consistent way original data, can supply global max/min theoretical max/min values occur. equal probability quantization used, quantiles generated using type 8 recommended Hyndman Fan (1996). method provides estimates approximately median-unbiased regardless distribution x.","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/quantize_raster.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quantizes raster to a set number of discrete levels — quantize_raster","text":"Haralick, R.M., Shanmugam, K., Dinstein, ., 1973. Textural features image classification. IEEE Transactions Systems, Man, Cybernetics 610–621. https://doi.org/10.1109/TSMC.1973.4309314 Hyndman, R.J., Fan, Y., 1996. Sample Quantiles Statistical Packages. American Statistician 50, 361–365. https://doi.org/10.1080/00031305.1996.10473566","code":""},{"path":"https://ailich.github.io/GLCMTextures/reference/quantize_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantizes raster to a set number of discrete levels — quantize_raster","text":"","code":"r<- rast(volcano, extent= ext(2667400, 2667400 + ncol(volcano)*10, 6478700, 6478700 + nrow(volcano)*10), crs = \"EPSG:27200\") rq1 <- quantize_raster(r = r, n_levels = 16, method = \"equal prob\") rq2 <- quantize_raster(r = r, n_levels = 16, method = \"equal range\")"}]
